trigger:
  - master
  - issue/*

variables:
  rolXServer: source/RolXServer
  rolXClient: source/rolx-client

jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest

    variables:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - task: Cache@2
        displayName: cache node_modules
        inputs:
          key: $(rolXClient)/package-lock.json|build
          path: $(rolXClient)/node_modules
          cacheHitVar: NODE_MODULES_RESTORED

      - script: npm ci
        displayName: npm ci
        workingDirectory: $(rolXClient)
        condition: ne(variables.NODE_MODULES_RESTORED, true)

      - script: npm run ng -- build
        displayName: ng build
        workingDirectory: $(rolXClient)

      - task: DotNetCoreCLI@2
        displayName: dotnet publish
        inputs:
          command: publish
          arguments: --configuration Release --output $(Build.StagingDirectory)/RolX
          publishWebProjects: true

      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: $(Build.StagingDirectory)/RolX
          artifactName: RolX

  - job: TestServer
    pool:
      vmImage: ubuntu-latest

    variables:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: build
          projects: $(rolXServer)/*.sln
          arguments: --configuration Release /WarnAsError

      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: test
          projects: $(rolXServer)/*.sln
          arguments: --no-build --configuration Release

  - job: TestClient
    pool:
      vmImage: ubuntu-latest

    steps:
      - task: Cache@2
        displayName: cache node_modules
        inputs:
          key: $(rolXClient)/package-lock.json|test
          path: $(rolXClient)/node_modules
          cacheHitVar: NODE_MODULES_RESTORED

      - script: npm ci
        displayName: npm ci
        workingDirectory: $(rolXClient)
        condition: ne(variables.NODE_MODULES_RESTORED, true)

      - script: npm run ng -- lint
        displayName: ng lint
        workingDirectory: $(rolXClient)

      - script: npx prettier --check .
        displayName: prettier --check
        workingDirectory: $(rolXClient)

      - script: npm run ng -- test --watch=false
        displayName: ng test
        workingDirectory: $(rolXClient)

      - task: PublishTestResults@2
        displayName: publish test results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(rolXClient)/**/TESTS-*.xml


