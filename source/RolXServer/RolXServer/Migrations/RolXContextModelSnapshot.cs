// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RolXServer;

#nullable disable

namespace RolXServer.Migrations
{
    [DbContext(typeof(RolXContext))]
    partial class RolXContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RolXServer.Projects.DataAccess.FavouritePhase", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PhaseId");

                    b.HasIndex("PhaseId");

                    b.ToTable("FavouritePhases");
                });

            modelBuilder.Entity("RolXServer.Projects.DataAccess.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Budget")
                        .HasColumnType("time(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Number")
                        .IsUnique();

                    b.ToTable("Phases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "P0001.001 - Lockheed Martin - F35",
                            IsBillable = true,
                            Name = "F35",
                            Number = 1,
                            ProjectId = 1,
                            StartDate = new DateTime(2021, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            FullName = "P0001.002 - Lockheed Martin - F117-A",
                            IsBillable = false,
                            Name = "F117-A",
                            Number = 2,
                            ProjectId = 1,
                            StartDate = new DateTime(2022, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2022, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "P0001.003 - Lockheed Martin - HaGaHuWa",
                            IsBillable = true,
                            Name = "HaGaHuWa",
                            Number = 3,
                            ProjectId = 1,
                            StartDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            FullName = "P0002.001 - SRF - Malony",
                            IsBillable = true,
                            Name = "Malony",
                            Number = 1,
                            ProjectId = 2,
                            StartDate = new DateTime(2021, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RolXServer.Projects.DataAccess.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lockheed Martin",
                            Number = "P0001"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SRF",
                            Number = "P0002"
                        });
                });

            modelBuilder.Entity("RolXServer.Records.DataAccess.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("PaidLeaveReason")
                        .HasColumnType("longtext");

                    b.Property<int?>("PaidLeaveType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Date", "UserId")
                        .IsUnique();

                    b.ToTable("Records");
                });

            modelBuilder.Entity("RolXServer.Records.DataAccess.RecordEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Begin")
                        .HasColumnType("time");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("DurationSeconds")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("Pause")
                        .HasColumnType("time(6)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhaseId");

                    b.HasIndex("RecordId");

                    b.ToTable("RecordEntries", (string)null);
                });

            modelBuilder.Entity("RolXServer.Users.DataAccess.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LeftDate")
                        .HasColumnType("date");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RolXServer.Users.DataAccess.UserBalanceCorrection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("Overtime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("Vacation")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBalanceCorrections");
                });

            modelBuilder.Entity("RolXServer.Users.DataAccess.UserPartTimeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Factor")
                        .HasColumnType("double");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "StartDate")
                        .IsUnique();

                    b.ToTable("UserPartTimeSettings");
                });

            modelBuilder.Entity("RolXServer.Projects.DataAccess.FavouritePhase", b =>
                {
                    b.HasOne("RolXServer.Projects.DataAccess.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RolXServer.Users.DataAccess.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RolXServer.Projects.DataAccess.Phase", b =>
                {
                    b.HasOne("RolXServer.Projects.DataAccess.Project", "Project")
                        .WithMany("Phases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RolXServer.Records.DataAccess.Record", b =>
                {
                    b.HasOne("RolXServer.Users.DataAccess.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RolXServer.Records.DataAccess.RecordEntry", b =>
                {
                    b.HasOne("RolXServer.Projects.DataAccess.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RolXServer.Records.DataAccess.Record", null)
                        .WithMany("Entries")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phase");
                });

            modelBuilder.Entity("RolXServer.Users.DataAccess.UserBalanceCorrection", b =>
                {
                    b.HasOne("RolXServer.Users.DataAccess.User", null)
                        .WithMany("BalanceCorrections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolXServer.Users.DataAccess.UserPartTimeSetting", b =>
                {
                    b.HasOne("RolXServer.Users.DataAccess.User", null)
                        .WithMany("PartTimeSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolXServer.Projects.DataAccess.Project", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("RolXServer.Records.DataAccess.Record", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("RolXServer.Users.DataAccess.User", b =>
                {
                    b.Navigation("BalanceCorrections");

                    b.Navigation("PartTimeSettings");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
